// Copyright (C) 2018 ETH Zurich
// Copyright (C) 2018 UT-Battelle, LLC
// All rights reserved.
//
// See LICENSE for terms of usage.
// See CITATION.md for citation guidelines, if DCA++ is used for scientific publications.
//
// Author: Urs R. Haehner (haehneru@itp.phys.ethz.ch)
//
// This is a CMake generated header file.
// It configures the DCA(+) calculation by selecting type defintions.

#ifndef DCA_CONFIG_DCA_HPP
#define DCA_CONFIG_DCA_HPP

#include "dca/config/haves_defines.hpp"
#include "dca/config/config_defines.hpp"
#include "dca/config/concurrency.hpp"    // defines Concurrency
#include "dca/config/lattice_model.hpp"  // defines Model
#include "dca/config/profiler.hpp"       // defines Profiler
#include "dca/config/rng.hpp"            // defines RandomNumberGenerator
#include "dca/config/walker_device.hpp"  // defines walker_device

#include "dca/parallel/stdthread/stdthread.hpp"
using Threading = dca::parallel::stdthread;

#include "dca/phys/dca_step/cluster_solver/cluster_solver_name.hpp"
constexpr dca::phys::solver::ClusterSolverName solver_name = @DCA_CLUSTER_SOLVER_NAME@;

#include "dca/phys/parameters/parameters.hpp"
using ParametersType = dca::phys::params::Parameters<Concurrency, Threading, Profiler, Model,
                                                     RandomNumberGenerator, solver_name>;

#include "dca/phys/dca_data/dca_data.hpp"
using DcaDataType = dca::phys::DcaData<ParametersType>;

// You know whats probably worse than using the C preprocessor,
// generating code using cmake.
#include "@DCA_CLUSTER_SOLVER_INCLUDE@"
template<dca::DistType DIST>
using ClusterSolverBaseType = @DCA_CLUSTER_SOLVER_TYPE@;

// TODO: Clean this up (remove #ifdef).
#ifdef DCA_WITH_THREADED_SOLVER
#include "@DCA_THREADED_SOLVER_INCLUDE@"
template<dca::DistType DIST>
using ClusterSolver = @DCA_THREADED_SOLVER_TYPE@;
#else
template<dca::DistType DIST>
using ClusterSolver = ClusterSolverBaseType<DIST>;
#endif  // DCA_WITH_THREADED_SOLVER

#include "dca/phys/dca_loop/dca_loop.hpp"
template<dca::DistType DIST>
using DcaLoopType = dca::phys::DcaLoop<ParametersType, DcaDataType, ClusterSolver<DIST>, DIST>;

#endif  // DCA_CONFIG_DCA_HPP
