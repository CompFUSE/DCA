// Copyright (C) 2018 ETH Zurich
// Copyright (C) 2018 UT-Battelle, LLC
// All rights reserved.
//
// See LICENSE for terms of usage.
// See CITATION.md for citation guidelines, if DCA++ is used for scientific publications.
//
// Author: Giovanni Balduzzi (gbalduzz@itp.phys.ethz.ch)
//
// This class stores compile time options for the MC accumulation.

#ifndef DCA_CONFIG_MC_OPTIONS_HPP
#define DCA_CONFIG_MC_OPTIONS_HPP

#include <complex>
#include <type_traits>
#ifdef DCA_HAVE_CUDA
#include "dca/linalg/util/allocators/device_allocator.hpp"
#include "dca/linalg/util/allocators/managed_allocator.hpp"
#endif  // DCA_HAVE_CUDA

namespace dca {
namespace config {
// dca::config::

struct McOptions {
  static constexpr bool single_precision = @MC_SINGLE_PRECISION@;
  using Real = std::conditional_t<single_precision, float, double>;
  using Complex = std::complex<Real>;

  static constexpr bool memory_savings = @MEMORY_SAVINGS@;

#ifdef DCA_HAVE_CUDA
  template <typename T>
  using TpAllocator = @TWO_PARTICLE_ALLOCATOR@;
#endif  // DCA_HAVE_CUDA
};

}  // namespace config
}  // namespace dca

#endif  // DCA_CONFIG_MC_OPTIONS_HPP
